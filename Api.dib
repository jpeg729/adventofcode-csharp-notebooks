#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#r "nuget: AngleSharp, 1.0.7"
using AngleSharp;
using AngleSharp.Dom;
using AngleSharp.Html.Dom;
using AngleSharp.Html.Parser;
using Microsoft.AspNetCore.Html;
using Microsoft.DotNet.Interactive;

// this should not necessary at runtime, but at the time of writing 
// the intellisense doesn't recognize the methods without it
using Microsoft.DotNet.Interactive.Formatting;
using static Microsoft.DotNet.Interactive.Formatting.PocketViewTags;

using System;
using System.IO;
using System.Net.Http;

#!csharp

#nullable enable
record Part {
    public string? Answer { get; set; }
    public string? Title { get; init; }
    public required IHtmlContent Description { get; init; }
    public string? ExampleInput { get; set; } 
    public string? ExampleAnswer { get; set; }

    public void Update(Part part) {
        Answer = part.Answer;
    }
}
class Problem {
    public int Year { get; init; }
    public int Day { get; init; }

    public Part? Part1 { get; private set; }
    public Part? Part2 { get; private set; }

    public string Input => _input ?? throw new InvalidOperationException("Problem has not been loaded yet");

    private readonly HttpClient _httpClient;
    private string? _input;

    public Problem(int year, int day) {
        Year = year;
        Day = day;

        _httpClient = new HttpClient();
        _httpClient.BaseAddress = new Uri("https://adventofcode.com/");
        _httpClient.DefaultRequestHeaders.Add("Cookie", $"session={Environment.GetEnvironmentVariable("AOC_SESSION_COOKIE")}");
    }

    public async Task Load() {
        var problemReleaseDate = new DateTime(Year, 12, Day, 5, 0, 0, DateTimeKind.Utc);
        var wait = problemReleaseDate - DateTime.UtcNow;
        DisplayedValue output = display(wait);
        while (wait.TotalSeconds > 1) {
            var waitString = "";
            if (wait.TotalDays > 1) waitString = $"{wait:%d} days, ";
            if (wait.TotalHours > 1) waitString += $"{wait:%h} hours, ";
            if (wait.TotalMinutes > 1) waitString += $"{wait:%m} minutes, ";
            if (wait.TotalSeconds > 1) waitString += $"{wait:%s} seconds";
            var displayValue = div(
                h2($"{Year} day {Day}"),
                p($"This problem will be available in {waitString}")
            );
            if (output == null) {
                output = display(displayValue);
            } else {
                output.Update(displayValue);
            }
            if (wait.TotalMinutes > 10) return;
            await Task.Delay(1);
            wait = problemReleaseDate - DateTime.UtcNow;
        }
        if (wait.TotalMilliseconds > 0) await Task.Delay(wait);

        var parts = await ReadProblem();
        Part1 = parts[0];
        if (parts.Count > 1) Part2 = parts[1];

        _input = await ReadInput();

        var yellowStar = "⭐";
        var greyStar = "☆";
        var stars = (Part1?.Answer != null ? yellowStar : greyStar) + (Part2?.Answer != null ? yellowStar : greyStar);
        var summary = div(
            h2($"{Year} day {Day} ", stars),
            h3(Part1!.Title),
            Part1.Answer == null ? p("Not answered yet") : p("Answer: ", code(Part1.Answer)),
            h3(Part2?.Title ?? "--- Part 2 ---"),
            Part2?.Answer == null ? p("Not answered yet") : p("Answer: ", code(Part2.Answer))
        );
        if (output == null) {
            output = display(summary);
        } else {
            output.Update(summary);
        }
    }

    public void ShowPart1() {
        if (Part1 == null) {
            display(h3("Part 1 is not available yet"));
        } 
        else {
            ShowPart(Part1!);
        }
    }

    public void ShowPart2() {
        if (Part2 == null) {
            display(h3("Part 2 is not available yet"));
        } 
        else {
            ShowPart(Part2!);
        } 
    }

    private void ShowPart(Part part) {
        var which = part == Part1 ? "Part1" : "Part2";
        if (part!.ExampleAnswer != null && part.ExampleInput != null) {
            display(div(
                part.Description,
                hr(),
                dl(
                    dt($"problem.{which}.ExampleInput ", em[style:"opacity:0.6"]("if this is incorrect you can assign a new value or null to skip it")),
                    dd(pre(code(part.ExampleInput)))
                ),
                dl(
                    dt($"problem.{which}.ExampleAnswer ", em[style:"opacity:0.6"]("if this is incorrect you can assign a new value or null to skip it")),
                    dd(pre(code(part.ExampleAnswer)))
                )
            ));
        }
        else {
            display(part!.Description);
        }
    }

    public async Task<bool?> VerifyPart1<TAnswer>(Func<string, TAnswer> solution) {
        if (Part1 == null) {
            display(h3("Part 1 is not available yet"));
            return null;
        } else {
            return VerifyExample(Part1!, solution)
                ?? VerifyStoredAnswer(Part1!, solution)
                ?? await SubmitAnswer(Part1!, solution);
        }
    }

    public async Task<bool?> VerifyPart2<TAnswer>(Func<string, TAnswer> solution) {
        if (Part2 == null) {
            display(h3("Part 2 is not available yet"));
            return null;
        } else {
            return VerifyExample(Part2!, solution)
                ?? VerifyStoredAnswer(Part2!, solution)
                ?? await SubmitAnswer(Part2!, solution);
        }
    }

    private bool? VerifyExample<TAnswer>(Part part, Func<string, TAnswer> solution) {
        if (part!.ExampleAnswer != null && part.ExampleInput != null) {
            var answer = solution(part.ExampleInput)!.ToString();
            if (!AnswerExplanation("example", answer, part.ExampleAnswer)) {
                return false;
            }
        }
        return null;
    }

    private bool? VerifyStoredAnswer<TAnswer>(Part part, Func<string, TAnswer> solution) {
        if (part!.Answer != null) {
            var answer = solution(_input!)!.ToString();
            return AnswerExplanation("locally stored answer", answer, part.Answer);
        }
        return null;
    }

    private async Task<bool> SubmitAnswer<TAnswer>(Part part, Func<string, TAnswer> solution) {
        var answer = solution(_input!)!.ToString();
        var level = part == Part1 ? 1 : 2;
        var responseContent = await SubmitAnswer(level, answer!);
        var isRightAnswer = AnswerExplanation("aoc website", answer, part.Answer!);
        if (responseContent != null) {
            display(responseContent);
        }
        return isRightAnswer;
    }

    private bool AnswerExplanation(string phase, string? yourAnswer, string correctAnswer) {
        var tickMark = "\u2713";
        var crossMark = "\u2717";
        display(p(
            "Testing your answer against the ", 
            em(phase), 
            ": ",
            yourAnswer == correctAnswer 
                ? strong[style:"color:green"](tickMark + " OK") 
                : strong[style:"color:red"](crossMark + " FAILED"),
            yourAnswer == correctAnswer ? "" : span(" (received ", code(yourAnswer), ", expected ", code(correctAnswer), ")")
        ));
        return yourAnswer == correctAnswer;
    }

    private async Task<List<Part>> ReadProblem(bool force = false) {
        var folder = "Problems";
        var filename = $"{Year}-{Day:00}.html";
        var fullPath = Path.Combine(folder, filename);
        if (!Path.Exists(folder)) Directory.CreateDirectory(folder);
        if (!force && File.Exists(fullPath)) {
            return await ParseProblem(File.ReadAllText(fullPath));
        }
        var content = await _httpClient.GetStringAsync($"/{Year}/day/{Day}");
        File.WriteAllText(fullPath, content);
        return await ParseProblem(content);
    }

    private async Task<string> ReadInput() {
        var folder = "Problems";
        var filename = $"{Year}-{Day:00}.txt";
        var fullPath = Path.Combine(folder, filename);
        if (!Path.Exists(folder)) Directory.CreateDirectory(folder);
        if (File.Exists(fullPath)) {
            return File.ReadAllText(fullPath);
        }
        var response = await _httpClient.GetAsync($"{Year}/day/{Day}/input");
        var data = await response.Content.ReadAsStringAsync();
        File.WriteAllText(fullPath, data);
        return data;
    }

    private async Task<IHtmlContent?> SubmitAnswer(int part, string answer) {
        // display(p("Not Submitting answer..."));
        var requestContent = new FormUrlEncodedContent(new[] {
            new KeyValuePair<string, string>("level", part.ToString()),
            new KeyValuePair<string, string>("answer", answer),
        });
        var response = await _httpClient.PostAsync($"{Year}/day/{Day}/answer", requestContent);
        response.EnsureSuccessStatusCode();
        var content = await response.Content.ReadAsStringAsync();
        
        var parts = await ReadProblem(force:true);
        Part1!.Update(parts[0]);
        if (parts.Count > 1) {
            if (Part2 != null) Part2.Update(parts[1]);
            else Part2 = parts[1];
        } 

        var parser = new HtmlParser();
        var document = await parser.ParseDocumentAsync(content);
        var article = document.QuerySelector("article:not(.day-desc)");
        if (article is IElement explanation) {
            return HTML(explanation.OuterHtml);
        }
        return null;
    }

    private async Task<List<Part>> ParseProblem(string content) {
        var parser = new HtmlParser();
        var document = await parser.ParseDocumentAsync(content);
        var parts = new List<Part>();
        foreach (var article in document.QuerySelectorAll("article.day-desc")) {
            var title = article.QuerySelector("h2")?.TextContent;

            var sample = article.QuerySelector("pre > code")?.TextContent;
            var sampleAnswer = article.QuerySelectorAll("code").LastOrDefault()?.TextContent;
            
            // The answer node seems to always be a <p> tag immediately following the <article> tag
            // It contains a <code> tag with the answer
            var answerNode = article.NextSibling; 
            while (answerNode?.NodeName == "#text") {
                answerNode = answerNode.NextSibling;
            }
            var answer = answerNode?.NodeName == "P" 
                ? (answerNode as IElement)?.QuerySelector("code")?.TextContent 
                : null;
            
            parts.Add(new Part {
                Answer = answer, 
                Title = title, 
                Description = HTML(article.OuterHtml),
                ExampleInput = sample,
                ExampleAnswer = sampleAnswer
            });
        }
        if (parts.Count > 1 && parts[1].ExampleInput == null) {
            parts[1].ExampleInput = parts[0].ExampleInput;
        }
        return parts;
    }
}
